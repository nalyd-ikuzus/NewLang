NewLang {
  Program
    = Statement*

  // Statements
  Statement
    = FunctionDefinition
    | VariableDeclaration
    | SpeakStatement
    | IfStatement
    | ExpressionStatement
    | ConfessStatement
    | comment

  // Variable declarations use one of the type keywords.
  VariableDeclaration
    = TypeKeyword ident is Expression "?" --conditional
    | TypeKeyword ident is Expression --certain

  TypeKeyword
    = newnum 
    | newtext 
    | newlist 
    | newbool 
    //| newdict 
    | newset

  // A function definition using "newfunction"
  FunctionDefinition
    = newfunction ident "(" ParameterList ")" ":" ReturnType Block
    
  // Speak statement - for printing values
  SpeakStatement
  	= speak Expression

  // Conditionals: no extra parentheses around the expression.
  IfStatement
  	= if Expression Block ElseClause --long
    | if Expression Block ElseIfClause --elif
    | if Expression Block --short

  ElseIfClause
    = elif Expression Block ElseClause --long
    | elif Expression Block ElseIfClause --chain
    | elif Expression Block --short

  ElseClause
    = else Block

  // A block is a sequence of statements in braces.
  Block
    = "{" Statement* "}"

  // Expression statement (for function calls like speak(...))
  ExpressionStatement
    = Expression

  // The confess statement (used for returning values)
  ConfessStatement
    = confess Expression --long
    | confess --short

  // Function parameters
  ParameterList
    = ListOf<Parameter, ",">
    
  Parameter
  	= ident ":" Type
    
  ReturnType
  	= Type --recurse
    | "void" --void
  
  Type
  	= Type "[]" --list
    | Type "?"  --optional
    | SimpleType --simple
    
  SimpleType
  	= "int"
    | "float"
    | "bool"
    | "text"

  // Expressions
  Expression
    = UnwrapExpr
    
  //Level 1 Expression - Optional unwrapping
  UnwrapExpr
  	= Expression "??" OrExpr --unwrapelse
    | OrExpr --recurse

  //Level 2 Expression - Logical OR
  OrExpr
    = AndExpr ( "or" AndExpr )+ --compare
    | AndExpr --recurse

  //Level 3 Expression - Logical AND
  AndExpr
    = Comparison ( "and" Comparison )+ --compare
    | Comparison --recurse

  //Level 4 Expression - Comparisons: equal, not equal, less/less or equal, more/more or equal.
  Comparison
    = AddExpr CompOp AddExpr --compare
    | AddExpr --recurse

  //Comparison Operators
  CompOp
    = is | unis | lessis | less | moreis | more

  // Truth values (booleans)
  truthValue
    = truth | untruth

  // Arithmetic operations:
  //Level 5 Expression - Addition and subtraction
  AddExpr
    = AddExpr plus MulExpr   --plus
    | AddExpr minus MulExpr  --minus
    | MulExpr

  //Level 6 Expression - Multiplication, division, and modulo (remain)
  MulExpr
    = MulExpr ( multiply | divide | remain ) ExpExpr  --mulop
    | ExpExpr

  //Level 7 Expression - Exponentiation, using "^"
  ExpExpr
    = PriExpr exp ExpExpr  --power
    | UnaryExpr
    
    
  UnaryExpr
  	= ("-" | "!") PriExpr --unary
    | PriExpr

  //Level 8 Expression - Primary expressions: parentheses, numbers, strings, truth values,
  // or identifiers that can be followed by function-call or indexing chains.
  PriExpr
    = "(" Expression ")"  --paren
    | ident "(" ArgumentList ")" --call
    | ident "[" Expression "]"   --index
    | ident   --id
    | numeral --number
    | String --string
    | truthValue --boolean
    | List  "[" Expression "]" --listIndex
    | List
    // | Dict

  // Function call or array indexing.
  CallOrIndex
    = "(" ArgumentList? ")"   --call
    | "[" Expression "]"      --index

  ArgumentList
    = ListOf<Expression, ",">

  // Lexical Elements
  ident
    = ~keyword letter idchar*             --ident

  numeral
    = digit+ ("." digit+) (("E" | "e") ("+" | "-")? digit+)?   --float
    | digit+ --int

  String
    = "\"" (~"\"" any)* "\""
    
  List
   = "[" ArgumentList "]"
   
//  KeyValPairs = ident ":" Expression
   
  // Dict
  // 	= "{" ListOf<KeyValPairs, ","> "}"

  // Whitespace and Comments
  _
    = (space | comment)*

  comment
    = ("//" (~"\n" any)*)
    | ("#" (~"\n" any)*)
    
    //keywords
    multiply = "multiply" ~idchar
    divide = "divide" ~idchar
    remain = "remain" ~idchar
    exp = "exp" ~idchar
    is = "is" ~idchar
    unis = "unis" ~idchar
    lessis = "lessis" ~idchar
    less = "less" ~idchar
    moreis = "moreis" ~idchar
    more = "more" ~idchar
    plus = "plus" ~idchar
    minus = "minus" ~idchar
    newnum = "newnum" ~idchar
    newtext = "newtext" ~idchar
    newlist = "newlist" ~idchar
    newbool = "newbool" ~idchar
    // newdict = "newdict" ~idchar
    newset = "newset" ~idchar
    newfunction = "newfunction" ~idchar
    truth = "truth" ~idchar
    untruth = "untruth" ~idchar
    and = "and" ~idchar
    or = "or" ~idchar
    if = "if" ~idchar
    elif = "elif" ~idchar
    else = "else" ~idchar
    speak = "speak" ~idchar
    confess = "confess" ~idchar
    
    idchar = letter | digit | "_"
    
    keyword = multiply | divide | remain |  is | unis | lessis | less | moreis 
    | more | plus | minus | newnum | newtext | newlist | newbool 
    | newset | newfunction | truth | untruth | and | or | if | elif
    | else | speak | confess | exp //| newdict
}