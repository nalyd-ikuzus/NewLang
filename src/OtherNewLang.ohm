NewLang {
  Program     = Statement*

  Statement   = Variable
              | Function
              | SpeakStmt
              | ConfessStmt
              | IfStmt
              | Comment

  Variable    = Type id "is" Exp
  Type        = "newnum" | "newtext" | "newlist" | "newbool" | "newdict" | "newset"

  Function     = "newfunction" id "(" Params ")" "{" Statement* "}"
  Params      = listOf<id, ",">

  SpeakStmt   = "speak" "(" Exp ")"
  ConfessStmt = "confess" Exp?    

  
  IfStmt      = IfClause ElseClause?
  IfClause    = "if" Exp "{" Statement* "}" ("elif" Exp "{" Statement* "}")*
  ElseClause  = "untruth" "{" Statement* "}"

 
  Exp         = PrimaryExp (Operator PrimaryExp)*
  Operator       = "plus" | "minus" | "multiply" | "divide" | "remain"
              | "lessis" | "less" | "moreis" | "more"
              | "is" | "unis" | "and" | "or"


  PrimaryExp  = "(" Exp ")" --parens
              | id         
              | String     
              | Num        
              | Bool       
              | List       
              | Dict       
              | Set        

  Bool        = "truth" | "untruth"
  Num         = digit+
  String      = "\"" StringChar* "\""
  StringChar  = ~"\"" any

  List        = "[" listOf<Exp, ","> "]"
  Dict        = "{" listOf<KeyValuePair, ","> "}"
  Set         = "set" "(" listOf<Exp, ","> ")"

  KeyValuePair = id "is" Exp

  id          = letter alnum*

  Comment     = "#" (~"\n" any)*
}
